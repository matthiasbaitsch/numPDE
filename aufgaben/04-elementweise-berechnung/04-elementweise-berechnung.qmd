---
title: Aufgabenblatt 4
subtitle: Elementweise Berechnung
engine: julia
---

```{julia}
#| echo: false
#| message: false
using MMJMesh
using MMJMesh.Meshes
using IntervalSets
```

## Assemblierung des linearen Gleichungssystems

### Basisfunktionen und Elementfunktionen

Elemente und Knoten müssen nicht zwangsläufig fortlaufend nummeriert sein. Stellen Sie für das (originell nummerierte) Netz

![](bilder/mesh.svg)

die Assemblierungsmatrizen $\mathbf{A}^e, \; e = 1, \dots, 4$ auf. Skizzieren Sie hierfür die Basisfunktionen $\varphi_i, \; i = 1, \dots, 5$ und die Elementfunktionen $N^e_k, \; k = 1, 2$.

Können Sie das Schema erkennen, nach dem die Einsen in den Matrizen platziert werden? Schreiben sie hierzu für jedes Element in einem Spaltenvektor die Knotennummern neben die Matrix.

### Steifigkeitsmatrix und Lastvektor für ein Element

Bestimmen Sie für den Bohrpfahl die Elementsteifigkeitsmatrix $\mathbf{K}^e$ und den Elementlastvektor $\mathbf{r}^e$ für ein Element der Länge $h$.

### Globaler Lastvektor

Leiten Sie (analog zur globalen Steifigkeitsmatrix) die Assemblierung des globalen Lastvektors $\mathbf{r}$ her.

### Feder und Einzellast

Nach welchem Schema können eine Feder und eine Einzellast im linearen Gleichungssystem berücksichtigt werden?

## Programmierung

### Vorbereitung

Erklären Sie sich jeweils, was in den folgenden Codefragmenten passiert.

1. FE-Netz

    ```{julia}
    m = Mesh(0 .. 20, 25)
    mplot(m) |> mconf()
    ```

1. Parametrisierte Funktion

    ```{julia}
    function bsin(b)
        function f(x)
            return b * sin(x)
        end
        return f
    end

    f1 = bsin(1)
    f2 = bsin(5)

    println("f1(π/2) = ", f1(π / 2), ", f2(π/2) = ", f2(π / 2))
    ```

1. Ein Element des FE-Netzes

    ```{julia}
    e22 = element(m, 22)
    println(e22)
    println(length(e22))
    ```

### Berechnung für ein Element

Implementieren Sie die Funktionen `pile_ke(EA, C)`, `pile_re(n)` für die Elementmatrix und den Elementlastvektor.

Damit die Assemblierung des linearen Gleichungssystems problemunabhängig programmiert werden kann, geben die Funktionen `pile_ke(e)` und `pile_re(e)` jeweils eine Funktion zurück, die für eine Element `e` die Elementsteifigkeitsmatrix beziehungsweise den Elementlastvektor berechnet. Hier haben Sie bitte ein bisschen Geduld, das wird sich klären.

Hier das Grundgerüst für den Elementlastvektor:

```{julia}
function pile_re(n)
    function refunc(e)
        return 3 * nodeindices(e)
    end
    return refunc
end

m = Mesh(0 .. 20, 400)
refunc = pile_re(77)
refunc(element(m, 27))
```

### Vorbereitung

Erklären Sie sich jeweils, was in den folgenden Codefragmenten passiert.

1. Funktion mit zwei Rückgabewerten

    ```{julia}
    function test(x)
        return x, x^2
    end

    a, b = test(2)
    println("a = ", a, ", b = ", b)
    ```

1. Addition einer Untermatrix mit Indexvektor:

    ```{julia}
    I = [4, 1]
    K = reshape(collect(1:16), 4, 4)
    Ke = [100 200; 300 400]  

    display(K)
    display(Ke)
    display(K[I, I])

    K[I, I] += Ke

    display(K)
    ```

    Passen Sie die Matrix `Ae` so an, dass Sie für `K` das selbe Ergebnis wie oben erhalten (Block mit Code kopieren):

    ```{julia}
    K = reshape(collect(1:16), 4, 4)
    Ke = [100 200; 300 400]  
    Ae = [0 0 0 0; 0 0 0 0]
    K += Ae' * Ke * Ae

    display(K)
    ```

    Wie addieren Sie die Elementsteifigkeitsmatrizen zur globalen Matrix hinzu?

1. Schleife über Elemente

    ```{julia}
    m = Mesh(p.Ω, 4)
    for e = elements(m)
        println(e)
        println(nodeindices(e))
    end
    ```

1. Funktion mit Elementen assoziieren

    ```{julia}
    m = Mesh(0 .. 20, 4)
    e3 = element(m, 3)
    m.data[:test, :elements] = sqrt

    f = e3.data[:test]
    f(4)
    ```

    Wie können Sie diese Idee für die Assemblierung des linearen Gleichungssystems nutzen?


### Lineares Gleichungssystem

Erstellen und testen Sie die Funktion `assemble_kr(m)`, die für ein Netz `m` die globale Steifigkeitsmatrix $\mathbf{K}$ und den globalen Lastvektor $\mathbf{r}$ zurück gibt. 

Feder und Einzellast bleiben im Moment unberücksichtigt.

### Organisation

Verschieben Sie die Funktionen für den Bohrpfahl in eine Datei `pile.jl` und die Funktion für das LGS in eine Datei `fem.jl`. Stellen Sie sicher, dass ihr Notebook nach wie vor ausgeführt werden kann.

### Berechnung

Kopieren Sie ihr Notebook für das vorherige Aufgabenblatt und ändern Sie die Funktion `pile_fem` dahingehend, dass die Berechnung von $\hat{\mathbf{u}}$ mithilfe der Funktionen aus diesem Aufgabenblatt erfolgt. An dieser Stelle müssen Sie Federsteifigkeit und Einzellast einbauen.

TODO: Wird noch ergänzt